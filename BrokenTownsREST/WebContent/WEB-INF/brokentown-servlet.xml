<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.3.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<mvc:annotation-driven />

	<context:component-scan base-package="controllers" />

	<!-- <bean id="myEntityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="brokentown" />
	</bean> -->

	<bean id="myTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="myEntityManagerFactory" />
	</bean>
	
	<!-- encryptor bean -->
	<bean id="bCryptPasswordEncoder"
    class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	<!-- previous servlet content -->
	<!-- Do not need this yet -->
	<!-- <mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/user/*/todo/**" />
			<bean id="DataSecurityInterceptor" class="security.DataSecurityInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors> -->

	<!-- additional servlet content -->
	
	
	
		<!-- NEW STUFF FOR RDS -->
	
	<bean id="dataSource"
  class="org.springframework.jdbc.datasource.DriverManagerDataSource">
  <property name="driverClassName" value="${rds_driver}" />
  <property name="url"
    value="${rds_jdbc_host}" />
  <property name="username" value="${rds_mysql_user}" />
  <property name="password" value="${rds_mysql_password}" />
</bean>

 <bean id="persistenceExceptionTranslationPostProcessor"
  class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
 
	




<bean id="myEntityManagerFactory"
  class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
  <property name="dataSource" ref="dataSource" />
  <property name="packagesToScan" value="entities" />
  <property name="jpaVendorAdapter">
    <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
  </property>
  <property name="jpaProperties">
    <props>
      <prop key="hibernate.show_sql">false</prop>
          <prop key="hibernate.format_sql">false</prop>
      <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
      <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>
    </props>
  </property>
</bean>
	
	
	
	
	
	
	<!-- beans go below, change the id and the class -->
	<bean id="petsdao1" class="data.UserDAOImpl"/> 
	<bean id="petsdao2" class="data.MessagePostDAOImpl"/> 
	<bean id="petsdao3" class="data.PhotoDAOImpl"/> 
	<bean id="petsdao4" class="data.CaseDAOImpl"/> 
	<bean id="petsdao5" class="data.MunicipalityDAOImpl"/> 
	<bean id="petsdao6" class="data.AuthDAOImpl"/>
	

	<tx:annotation-driven transaction-manager="myTransactionManager" />
	
	 <!-- This is how you can upload files -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10000000" />
	</bean>
	
	
	<!-- This loads the .properties file(s) by name -->
	<!-- This loads the properties file -->
	
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
      <list>
        <value>classpath:s3.properties</value>
        <value>classpath:rds.properties</value>
      </list>
    </property>
	</bean>
	
		<!-- This creates a credentials object from the .properties file values -->
	<bean id="s3Credentials" class="com.amazonaws.auth.BasicAWSCredentials">
		<constructor-arg type="String" value="${aws_access_key_id}" />
		<constructor-arg type="String" value="${aws_secret_access_key}" />
	</bean>

	<!-- This creates an actual client using the credentials above -->
	<bean id="amazonS3Client" class="com.amazonaws.services.s3.AmazonS3Client">
		<constructor-arg type="AWSCredentials" ref="s3Credentials" />
	</bean>
	
	
	
	
	
	
	
	
	
</beans>